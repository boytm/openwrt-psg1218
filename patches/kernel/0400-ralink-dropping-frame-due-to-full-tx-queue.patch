--- a/drivers/net/wireless/rt2x00/rt2800mmio.c	2016-11-30 00:44:43.000000000 +0800
+++ b/drivers/net/wireless/rt2x00/rt2800mmio.c	2017-08-17 10:16:22.000000000 +0800
@@ -652,7 +652,7 @@
 
 	switch (queue->qid) {
 	case QID_RX:
-		queue->limit = 128;
+		queue->limit = 256;
 		queue->data_size = AGGREGATION_SIZE;
 		queue->desc_size = RXD_DESC_SIZE;
 		queue->winfo_size = rxwi_size;
@@ -663,7 +663,7 @@
 	case QID_AC_VI:
 	case QID_AC_BE:
 	case QID_AC_BK:
-		queue->limit = 64;
+		queue->limit = 256
 		queue->data_size = AGGREGATION_SIZE;
 		queue->desc_size = TXD_DESC_SIZE;
 		queue->winfo_size = txwi_size;
--- a/drivers/net/wireless/rt2x00/rt2x00mac.c	2016-11-30 00:44:43.000000000 +0800
+++ b/drivers/net/wireless/rt2x00/rt2x00mac.c	2017-08-17 10:18:08.000000000 +0800
@@ -115,6 +115,26 @@
 	if (!test_bit(DEVICE_STATE_PRESENT, &rt2x00dev->flags))
 		goto exit_free_skb;
 
+ 	/* Dirty hack for Queue overrun protection,
+ 	 * if AC_VO/AC_VI/AC_BE is full, use next queue.
+ 	 * if AC_BK is full use previous queue.
+ 	 */
+ 	if (qid < 4) {
+ 		queue = rt2x00queue_get_tx_queue(rt2x00dev,qid);
+ 		if (unlikely(rt2x00queue_full(queue))){
+ 			switch(qid){
+ 				case 0: /* QID_AC_VO */
+ 				case 1: /* QID_AC_VI */
+ 				case 2: /* QID_AC_BE */
+ 					qid++;
+ 					break;
+ 				case 3: /* QID_AC_BK */
+ 					qid--;
+ 					break;
+ 			}
+ 		}
+ 	}
+
 	/*
 	 * Use the ATIM queue if appropriate and present.
 	 */
--- drivers/net/wireless/rt2x00/rt2x00queue.c	2016-11-30 00:44:43.000000000 +0800
+++ xx/drivers/net/wireless/rt2x00/rt2x00queue.c	2017-08-17 10:21:13.000000000 +0800
@@ -1213,16 +1213,40 @@
 static void rt2x00queue_init(struct rt2x00_dev *rt2x00dev,
 			     struct data_queue *queue, enum data_queue_qid qid)
 {
+ 	/* Use default values for each queue type */
+ 	unsigned short cwmin = 5, cwmax = 10, aifs = 2, txop = 0;
+ 	
+ 	switch (qid) {
+ 		case QID_AC_VO:
+ 			cwmin = 2;
+ 			cwmax = 3;
+ 			txop = 47;
+ 			break;
+ 		case QID_AC_VI:
+ 			cwmin = 3;
+ 			cwmax = 4;
+ 			txop = 94;
+ 			break;
+ 		case QID_AC_BE:
+ 			cwmin = 4;
+ 			aifs = 3;
+ 			break;
+ 		case QID_AC_BK:
+ 			cwmin = 4;
+ 			aifs = 7;
+ 			break;
+ 	}
+
 	mutex_init(&queue->status_lock);
 	spin_lock_init(&queue->tx_lock);
 	spin_lock_init(&queue->index_lock);
 
 	queue->rt2x00dev = rt2x00dev;
 	queue->qid = qid;
-	queue->txop = 0;
-	queue->aifs = 2;
-	queue->cw_min = 5;
-	queue->cw_max = 10;
+ 	queue->txop = txop;
+ 	queue->aifs = aifs;
+ 	queue->cw_min = cwmin;
+ 	queue->cw_max = cwmax;
 
 	rt2x00dev->ops->queue_init(queue);
 
